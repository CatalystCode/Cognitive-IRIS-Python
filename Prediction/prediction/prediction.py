# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class PredictionConfiguration(Configuration):
    """Configuration for Prediction
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'https://customvisionppe.azure-api.net/v1.0/Prediction'

        super(PredictionConfiguration, self).__init__(base_url)

        self.add_user_agent('prediction/{}'.format(VERSION))


class Prediction(object):
    """Prediction

    :ivar config: Configuration for client.
    :vartype config: PredictionConfiguration

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = PredictionConfiguration(base_url)
        self._client = ServiceClient(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def evaluate_url(
            self, project_id, iteration_id=None, prediction_key=None, prediction_key1=None, image_url=None, custom_headers=None, raw=False, **operation_config):
        """Evaluate an image url.

        :param project_id: Format - uuid. The project to evaluate against
        :type project_id: str
        :param iteration_id: Format - uuid. Optional. Specifies the id of a
         particular project iteration to evaluate against.
         The default iteration will be used when not provided
        :type iteration_id: str
        :param prediction_key: subscription key in url
        :type prediction_key: str
        :param prediction_key1: subscription key in header
        :type prediction_key1: str
        :param image_url: An {Iris.Web.Api.Models.ImageUrl} that contains the
         url of the image to be evaluated
        :type image_url: :class:`ImageUrl <prediction.models.ImageUrl>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`ImageEvaluation <prediction.models.ImageEvaluation>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/{projectId}/url'
        path_format_arguments = {
            'projectId': self._serialize.url("project_id", project_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if iteration_id is not None:
            query_parameters['iterationId'] = self._serialize.query("iteration_id", iteration_id, 'str')
        if prediction_key is not None:
            query_parameters['Prediction-key'] = self._serialize.query("prediction_key", prediction_key, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if prediction_key1 is not None:
            header_parameters['Prediction-key'] = self._serialize.header("prediction_key1", prediction_key1, 'str')

        # Construct body
        if image_url is not None:
            body_content = self._serialize.body(image_url, 'ImageUrl')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ImageEvaluation', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def evaluate_image(
            self, project_id, image_data, iteration_id=None, prediction_key=None, prediction_key1=None, custom_headers=None, raw=False, **operation_config):
        """Evaluate an image.

        :param project_id: Format - uuid. The project to evaluate against
        :type project_id: str
        :param image_data:
        :type image_data: str
        :param iteration_id: Format - uuid. Optional. Specifies the id of a
         particular project iteration to evaluate against.
         The default iteration will be used when not provided
        :type iteration_id: str
        :param prediction_key: subscription key in url
        :type prediction_key: str
        :param prediction_key1: subscription key in header
        :type prediction_key1: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`ImageEvaluation <prediction.models.ImageEvaluation>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/{projectId}/image'
        path_format_arguments = {
            'projectId': self._serialize.url("project_id", project_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if iteration_id is not None:
            query_parameters['iterationId'] = self._serialize.query("iteration_id", iteration_id, 'str')
        if prediction_key is not None:
            query_parameters['Prediction-key'] = self._serialize.query("prediction_key", prediction_key, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)
        if prediction_key1 is not None:
            header_parameters['Prediction-key'] = self._serialize.header("prediction_key1", prediction_key1, 'str')

        # Construct form data
        form_data_content = {
            'imageData': image_data,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send_formdata(
            request, header_parameters, form_data_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ImageEvaluation', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
